/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.n1ppl3.thrift.kafka.jdbc.saver.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TUserLogRecordV1 implements org.apache.thrift.TBase<TUserLogRecordV1, TUserLogRecordV1._Fields>, java.io.Serializable, Cloneable, Comparable<TUserLogRecordV1> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserLogRecordV1");

    private static final org.apache.thrift.protocol.TField OPER_FIELD_DESC = new org.apache.thrift.protocol.TField("oper", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField PRS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prsId", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField DATE_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("dateIn", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField ALL_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("allAddr", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField UA_FIELD_DESC = new org.apache.thrift.protocol.TField("ua", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField OBJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("objectType", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUserLogRecordV1StandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUserLogRecordV1TupleSchemeFactory();

    public int oper; // required
    public java.lang.String remoteAddr; // optional
    public java.lang.String comment; // required
    public boolean success; // required
    public long prsId; // required
    public TInstant dateIn; // required
    public java.lang.String allAddr; // optional
    public java.lang.String ua; // optional
    public java.lang.String sid; // optional
    public java.lang.String objectType; // optional
    public java.lang.String objectId; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        OPER((short)2, "oper"),
        REMOTE_ADDR((short)3, "remoteAddr"),
        COMMENT((short)4, "comment"),
        SUCCESS((short)5, "success"),
        PRS_ID((short)6, "prsId"),
        DATE_IN((short)7, "dateIn"),
        ALL_ADDR((short)8, "allAddr"),
        UA((short)9, "ua"),
        SID((short)10, "sid"),
        OBJECT_TYPE((short)11, "objectType"),
        OBJECT_ID((short)12, "objectId");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 2: // OPER
                    return OPER;
                case 3: // REMOTE_ADDR
                    return REMOTE_ADDR;
                case 4: // COMMENT
                    return COMMENT;
                case 5: // SUCCESS
                    return SUCCESS;
                case 6: // PRS_ID
                    return PRS_ID;
                case 7: // DATE_IN
                    return DATE_IN;
                case 8: // ALL_ADDR
                    return ALL_ADDR;
                case 9: // UA
                    return UA;
                case 10: // SID
                    return SID;
                case 11: // OBJECT_TYPE
                    return OBJECT_TYPE;
                case 12: // OBJECT_ID
                    return OBJECT_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __OPER_ISSET_ID = 0;
    private static final int __SUCCESS_ISSET_ID = 1;
    private static final int __PRSID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    private static final _Fields optionals[] = {_Fields.REMOTE_ADDR,_Fields.ALL_ADDR,_Fields.UA,_Fields.SID,_Fields.OBJECT_TYPE,_Fields.OBJECT_ID};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.OPER, new org.apache.thrift.meta_data.FieldMetaData("oper", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.PRS_ID, new org.apache.thrift.meta_data.FieldMetaData("prsId", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.DATE_IN, new org.apache.thrift.meta_data.FieldMetaData("dateIn", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInstant.class)));
        tmpMap.put(_Fields.ALL_ADDR, new org.apache.thrift.meta_data.FieldMetaData("allAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.UA, new org.apache.thrift.meta_data.FieldMetaData("ua", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OBJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("objectType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserLogRecordV1.class, metaDataMap);
    }

    public TUserLogRecordV1() {
    }

    public TUserLogRecordV1(
            int oper,
            java.lang.String comment,
            boolean success,
            long prsId,
            TInstant dateIn)
    {
        this();
        this.oper = oper;
        setOperIsSet(true);
        this.comment = comment;
        this.success = success;
        setSuccessIsSet(true);
        this.prsId = prsId;
        setPrsIdIsSet(true);
        this.dateIn = dateIn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TUserLogRecordV1(TUserLogRecordV1 other) {
        __isset_bitfield = other.__isset_bitfield;
        this.oper = other.oper;
        if (other.isSetRemoteAddr()) {
            this.remoteAddr = other.remoteAddr;
        }
        if (other.isSetComment()) {
            this.comment = other.comment;
        }
        this.success = other.success;
        this.prsId = other.prsId;
        if (other.isSetDateIn()) {
            this.dateIn = new TInstant(other.dateIn);
        }
        if (other.isSetAllAddr()) {
            this.allAddr = other.allAddr;
        }
        if (other.isSetUa()) {
            this.ua = other.ua;
        }
        if (other.isSetSid()) {
            this.sid = other.sid;
        }
        if (other.isSetObjectType()) {
            this.objectType = other.objectType;
        }
        if (other.isSetObjectId()) {
            this.objectId = other.objectId;
        }
    }

    public TUserLogRecordV1 deepCopy() {
        return new TUserLogRecordV1(this);
    }

    @Override
    public void clear() {
        setOperIsSet(false);
        this.oper = 0;
        this.remoteAddr = null;
        this.comment = null;
        setSuccessIsSet(false);
        this.success = false;
        setPrsIdIsSet(false);
        this.prsId = 0;
        this.dateIn = null;
        this.allAddr = null;
        this.ua = null;
        this.sid = null;
        this.objectType = null;
        this.objectId = null;
    }

    public int getOper() {
        return this.oper;
    }

    public TUserLogRecordV1 setOper(int oper) {
        this.oper = oper;
        setOperIsSet(true);
        return this;
    }

    public void unsetOper() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPER_ISSET_ID);
    }

    /** Returns true if field oper is set (has been assigned a value) and false otherwise */
    public boolean isSetOper() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPER_ISSET_ID);
    }

    public void setOperIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPER_ISSET_ID, value);
    }

    public java.lang.String getRemoteAddr() {
        return this.remoteAddr;
    }

    public TUserLogRecordV1 setRemoteAddr(java.lang.String remoteAddr) {
        this.remoteAddr = remoteAddr;
        return this;
    }

    public void unsetRemoteAddr() {
        this.remoteAddr = null;
    }

    /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteAddr() {
        return this.remoteAddr != null;
    }

    public void setRemoteAddrIsSet(boolean value) {
        if (!value) {
            this.remoteAddr = null;
        }
    }

    public java.lang.String getComment() {
        return this.comment;
    }

    public TUserLogRecordV1 setComment(java.lang.String comment) {
        this.comment = comment;
        return this;
    }

    public void unsetComment() {
        this.comment = null;
    }

    /** Returns true if field comment is set (has been assigned a value) and false otherwise */
    public boolean isSetComment() {
        return this.comment != null;
    }

    public void setCommentIsSet(boolean value) {
        if (!value) {
            this.comment = null;
        }
    }

    public boolean isSuccess() {
        return this.success;
    }

    public TUserLogRecordV1 setSuccess(boolean success) {
        this.success = success;
        setSuccessIsSet(true);
        return this;
    }

    public void unsetSuccess() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public long getPrsId() {
        return this.prsId;
    }

    public TUserLogRecordV1 setPrsId(long prsId) {
        this.prsId = prsId;
        setPrsIdIsSet(true);
        return this;
    }

    public void unsetPrsId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRSID_ISSET_ID);
    }

    /** Returns true if field prsId is set (has been assigned a value) and false otherwise */
    public boolean isSetPrsId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRSID_ISSET_ID);
    }

    public void setPrsIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRSID_ISSET_ID, value);
    }

    public TInstant getDateIn() {
        return this.dateIn;
    }

    public TUserLogRecordV1 setDateIn(TInstant dateIn) {
        this.dateIn = dateIn;
        return this;
    }

    public void unsetDateIn() {
        this.dateIn = null;
    }

    /** Returns true if field dateIn is set (has been assigned a value) and false otherwise */
    public boolean isSetDateIn() {
        return this.dateIn != null;
    }

    public void setDateInIsSet(boolean value) {
        if (!value) {
            this.dateIn = null;
        }
    }

    public java.lang.String getAllAddr() {
        return this.allAddr;
    }

    public TUserLogRecordV1 setAllAddr(java.lang.String allAddr) {
        this.allAddr = allAddr;
        return this;
    }

    public void unsetAllAddr() {
        this.allAddr = null;
    }

    /** Returns true if field allAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetAllAddr() {
        return this.allAddr != null;
    }

    public void setAllAddrIsSet(boolean value) {
        if (!value) {
            this.allAddr = null;
        }
    }

    public java.lang.String getUa() {
        return this.ua;
    }

    public TUserLogRecordV1 setUa(java.lang.String ua) {
        this.ua = ua;
        return this;
    }

    public void unsetUa() {
        this.ua = null;
    }

    /** Returns true if field ua is set (has been assigned a value) and false otherwise */
    public boolean isSetUa() {
        return this.ua != null;
    }

    public void setUaIsSet(boolean value) {
        if (!value) {
            this.ua = null;
        }
    }

    public java.lang.String getSid() {
        return this.sid;
    }

    public TUserLogRecordV1 setSid(java.lang.String sid) {
        this.sid = sid;
        return this;
    }

    public void unsetSid() {
        this.sid = null;
    }

    /** Returns true if field sid is set (has been assigned a value) and false otherwise */
    public boolean isSetSid() {
        return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
        if (!value) {
            this.sid = null;
        }
    }

    public java.lang.String getObjectType() {
        return this.objectType;
    }

    public TUserLogRecordV1 setObjectType(java.lang.String objectType) {
        this.objectType = objectType;
        return this;
    }

    public void unsetObjectType() {
        this.objectType = null;
    }

    /** Returns true if field objectType is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectType() {
        return this.objectType != null;
    }

    public void setObjectTypeIsSet(boolean value) {
        if (!value) {
            this.objectType = null;
        }
    }

    public java.lang.String getObjectId() {
        return this.objectId;
    }

    public TUserLogRecordV1 setObjectId(java.lang.String objectId) {
        this.objectId = objectId;
        return this;
    }

    public void unsetObjectId() {
        this.objectId = null;
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
        return this.objectId != null;
    }

    public void setObjectIdIsSet(boolean value) {
        if (!value) {
            this.objectId = null;
        }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
        switch (field) {
            case OPER:
                if (value == null) {
                    unsetOper();
                } else {
                    setOper((java.lang.Integer)value);
                }
                break;

            case REMOTE_ADDR:
                if (value == null) {
                    unsetRemoteAddr();
                } else {
                    setRemoteAddr((java.lang.String)value);
                }
                break;

            case COMMENT:
                if (value == null) {
                    unsetComment();
                } else {
                    setComment((java.lang.String)value);
                }
                break;

            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((java.lang.Boolean)value);
                }
                break;

            case PRS_ID:
                if (value == null) {
                    unsetPrsId();
                } else {
                    setPrsId((java.lang.Long)value);
                }
                break;

            case DATE_IN:
                if (value == null) {
                    unsetDateIn();
                } else {
                    setDateIn((TInstant)value);
                }
                break;

            case ALL_ADDR:
                if (value == null) {
                    unsetAllAddr();
                } else {
                    setAllAddr((java.lang.String)value);
                }
                break;

            case UA:
                if (value == null) {
                    unsetUa();
                } else {
                    setUa((java.lang.String)value);
                }
                break;

            case SID:
                if (value == null) {
                    unsetSid();
                } else {
                    setSid((java.lang.String)value);
                }
                break;

            case OBJECT_TYPE:
                if (value == null) {
                    unsetObjectType();
                } else {
                    setObjectType((java.lang.String)value);
                }
                break;

            case OBJECT_ID:
                if (value == null) {
                    unsetObjectId();
                } else {
                    setObjectId((java.lang.String)value);
                }
                break;

        }
    }

    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case OPER:
                return getOper();

            case REMOTE_ADDR:
                return getRemoteAddr();

            case COMMENT:
                return getComment();

            case SUCCESS:
                return isSuccess();

            case PRS_ID:
                return getPrsId();

            case DATE_IN:
                return getDateIn();

            case ALL_ADDR:
                return getAllAddr();

            case UA:
                return getUa();

            case SID:
                return getSid();

            case OBJECT_TYPE:
                return getObjectType();

            case OBJECT_ID:
                return getObjectId();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case OPER:
                return isSetOper();
            case REMOTE_ADDR:
                return isSetRemoteAddr();
            case COMMENT:
                return isSetComment();
            case SUCCESS:
                return isSetSuccess();
            case PRS_ID:
                return isSetPrsId();
            case DATE_IN:
                return isSetDateIn();
            case ALL_ADDR:
                return isSetAllAddr();
            case UA:
                return isSetUa();
            case SID:
                return isSetSid();
            case OBJECT_TYPE:
                return isSetObjectType();
            case OBJECT_ID:
                return isSetObjectId();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof TUserLogRecordV1)
            return this.equals((TUserLogRecordV1)that);
        return false;
    }

    public boolean equals(TUserLogRecordV1 that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_oper = true;
        boolean that_present_oper = true;
        if (this_present_oper || that_present_oper) {
            if (!(this_present_oper && that_present_oper))
                return false;
            if (this.oper != that.oper)
                return false;
        }

        boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
        boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
        if (this_present_remoteAddr || that_present_remoteAddr) {
            if (!(this_present_remoteAddr && that_present_remoteAddr))
                return false;
            if (!this.remoteAddr.equals(that.remoteAddr))
                return false;
        }

        boolean this_present_comment = true && this.isSetComment();
        boolean that_present_comment = true && that.isSetComment();
        if (this_present_comment || that_present_comment) {
            if (!(this_present_comment && that_present_comment))
                return false;
            if (!this.comment.equals(that.comment))
                return false;
        }

        boolean this_present_success = true;
        boolean that_present_success = true;
        if (this_present_success || that_present_success) {
            if (!(this_present_success && that_present_success))
                return false;
            if (this.success != that.success)
                return false;
        }

        boolean this_present_prsId = true;
        boolean that_present_prsId = true;
        if (this_present_prsId || that_present_prsId) {
            if (!(this_present_prsId && that_present_prsId))
                return false;
            if (this.prsId != that.prsId)
                return false;
        }

        boolean this_present_dateIn = true && this.isSetDateIn();
        boolean that_present_dateIn = true && that.isSetDateIn();
        if (this_present_dateIn || that_present_dateIn) {
            if (!(this_present_dateIn && that_present_dateIn))
                return false;
            if (!this.dateIn.equals(that.dateIn))
                return false;
        }

        boolean this_present_allAddr = true && this.isSetAllAddr();
        boolean that_present_allAddr = true && that.isSetAllAddr();
        if (this_present_allAddr || that_present_allAddr) {
            if (!(this_present_allAddr && that_present_allAddr))
                return false;
            if (!this.allAddr.equals(that.allAddr))
                return false;
        }

        boolean this_present_ua = true && this.isSetUa();
        boolean that_present_ua = true && that.isSetUa();
        if (this_present_ua || that_present_ua) {
            if (!(this_present_ua && that_present_ua))
                return false;
            if (!this.ua.equals(that.ua))
                return false;
        }

        boolean this_present_sid = true && this.isSetSid();
        boolean that_present_sid = true && that.isSetSid();
        if (this_present_sid || that_present_sid) {
            if (!(this_present_sid && that_present_sid))
                return false;
            if (!this.sid.equals(that.sid))
                return false;
        }

        boolean this_present_objectType = true && this.isSetObjectType();
        boolean that_present_objectType = true && that.isSetObjectType();
        if (this_present_objectType || that_present_objectType) {
            if (!(this_present_objectType && that_present_objectType))
                return false;
            if (!this.objectType.equals(that.objectType))
                return false;
        }

        boolean this_present_objectId = true && this.isSetObjectId();
        boolean that_present_objectId = true && that.isSetObjectId();
        if (this_present_objectId || that_present_objectId) {
            if (!(this_present_objectId && that_present_objectId))
                return false;
            if (!this.objectId.equals(that.objectId))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + oper;

        hashCode = hashCode * 8191 + ((isSetRemoteAddr()) ? 131071 : 524287);
        if (isSetRemoteAddr())
            hashCode = hashCode * 8191 + remoteAddr.hashCode();

        hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
        if (isSetComment())
            hashCode = hashCode * 8191 + comment.hashCode();

        hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

        hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prsId);

        hashCode = hashCode * 8191 + ((isSetDateIn()) ? 131071 : 524287);
        if (isSetDateIn())
            hashCode = hashCode * 8191 + dateIn.hashCode();

        hashCode = hashCode * 8191 + ((isSetAllAddr()) ? 131071 : 524287);
        if (isSetAllAddr())
            hashCode = hashCode * 8191 + allAddr.hashCode();

        hashCode = hashCode * 8191 + ((isSetUa()) ? 131071 : 524287);
        if (isSetUa())
            hashCode = hashCode * 8191 + ua.hashCode();

        hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
        if (isSetSid())
            hashCode = hashCode * 8191 + sid.hashCode();

        hashCode = hashCode * 8191 + ((isSetObjectType()) ? 131071 : 524287);
        if (isSetObjectType())
            hashCode = hashCode * 8191 + objectType.hashCode();

        hashCode = hashCode * 8191 + ((isSetObjectId()) ? 131071 : 524287);
        if (isSetObjectId())
            hashCode = hashCode * 8191 + objectId.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(TUserLogRecordV1 other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetOper()).compareTo(other.isSetOper());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOper()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper, other.oper);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetRemoteAddr()).compareTo(other.isSetRemoteAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRemoteAddr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, other.remoteAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetComment()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSuccess()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetPrsId()).compareTo(other.isSetPrsId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrsId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prsId, other.prsId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDateIn()).compareTo(other.isSetDateIn());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDateIn()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateIn, other.dateIn);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetAllAddr()).compareTo(other.isSetAllAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAllAddr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allAddr, other.allAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetUa()).compareTo(other.isSetUa());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUa()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ua, other.ua);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetObjectType()).compareTo(other.isSetObjectType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetObjectType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectType, other.objectType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetObjectId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("TUserLogRecordV1(");
        boolean first = true;

        sb.append("oper:");
        sb.append(this.oper);
        first = false;
        if (isSetRemoteAddr()) {
            if (!first) sb.append(", ");
            sb.append("remoteAddr:");
            if (this.remoteAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.remoteAddr);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("comment:");
        if (this.comment == null) {
            sb.append("null");
        } else {
            sb.append(this.comment);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("success:");
        sb.append(this.success);
        first = false;
        if (!first) sb.append(", ");
        sb.append("prsId:");
        sb.append(this.prsId);
        first = false;
        if (!first) sb.append(", ");
        sb.append("dateIn:");
        if (this.dateIn == null) {
            sb.append("null");
        } else {
            sb.append(this.dateIn);
        }
        first = false;
        if (isSetAllAddr()) {
            if (!first) sb.append(", ");
            sb.append("allAddr:");
            if (this.allAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.allAddr);
            }
            first = false;
        }
        if (isSetUa()) {
            if (!first) sb.append(", ");
            sb.append("ua:");
            if (this.ua == null) {
                sb.append("null");
            } else {
                sb.append(this.ua);
            }
            first = false;
        }
        if (isSetSid()) {
            if (!first) sb.append(", ");
            sb.append("sid:");
            if (this.sid == null) {
                sb.append("null");
            } else {
                sb.append(this.sid);
            }
            first = false;
        }
        if (isSetObjectType()) {
            if (!first) sb.append(", ");
            sb.append("objectType:");
            if (this.objectType == null) {
                sb.append("null");
            } else {
                sb.append(this.objectType);
            }
            first = false;
        }
        if (isSetObjectId()) {
            if (!first) sb.append(", ");
            sb.append("objectId:");
            if (this.objectId == null) {
                sb.append("null");
            } else {
                sb.append(this.objectId);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'oper' because it's a primitive and you chose the non-beans generator.
        if (comment == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'comment' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'prsId' because it's a primitive and you chose the non-beans generator.
        if (dateIn == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'dateIn' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
        if (dateIn != null) {
            dateIn.validate();
        }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TUserLogRecordV1StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TUserLogRecordV1StandardScheme getScheme() {
            return new TUserLogRecordV1StandardScheme();
        }
    }

    private static class TUserLogRecordV1StandardScheme extends org.apache.thrift.scheme.StandardScheme<TUserLogRecordV1> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TUserLogRecordV1 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 2: // OPER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.oper = iprot.readI32();
                            struct.setOperIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // REMOTE_ADDR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.remoteAddr = iprot.readString();
                            struct.setRemoteAddrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // COMMENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.comment = iprot.readString();
                            struct.setCommentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // PRS_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.prsId = iprot.readI64();
                            struct.setPrsIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // DATE_IN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.dateIn = new TInstant();
                            struct.dateIn.read(iprot);
                            struct.setDateInIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // ALL_ADDR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.allAddr = iprot.readString();
                            struct.setAllAddrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // UA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.ua = iprot.readString();
                            struct.setUaIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // SID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sid = iprot.readString();
                            struct.setSidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // OBJECT_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.objectType = iprot.readString();
                            struct.setObjectTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // OBJECT_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.objectId = iprot.readString();
                            struct.setObjectIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetOper()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'oper' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetSuccess()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetPrsId()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'prsId' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TUserLogRecordV1 struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(OPER_FIELD_DESC);
            oprot.writeI32(struct.oper);
            oprot.writeFieldEnd();
            if (struct.remoteAddr != null) {
                if (struct.isSetRemoteAddr()) {
                    oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
                    oprot.writeString(struct.remoteAddr);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.comment != null) {
                oprot.writeFieldBegin(COMMENT_FIELD_DESC);
                oprot.writeString(struct.comment);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            oprot.writeBool(struct.success);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PRS_ID_FIELD_DESC);
            oprot.writeI64(struct.prsId);
            oprot.writeFieldEnd();
            if (struct.dateIn != null) {
                oprot.writeFieldBegin(DATE_IN_FIELD_DESC);
                struct.dateIn.write(oprot);
                oprot.writeFieldEnd();
            }
            if (struct.allAddr != null) {
                if (struct.isSetAllAddr()) {
                    oprot.writeFieldBegin(ALL_ADDR_FIELD_DESC);
                    oprot.writeString(struct.allAddr);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.ua != null) {
                if (struct.isSetUa()) {
                    oprot.writeFieldBegin(UA_FIELD_DESC);
                    oprot.writeString(struct.ua);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.sid != null) {
                if (struct.isSetSid()) {
                    oprot.writeFieldBegin(SID_FIELD_DESC);
                    oprot.writeString(struct.sid);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.objectType != null) {
                if (struct.isSetObjectType()) {
                    oprot.writeFieldBegin(OBJECT_TYPE_FIELD_DESC);
                    oprot.writeString(struct.objectType);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.objectId != null) {
                if (struct.isSetObjectId()) {
                    oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
                    oprot.writeString(struct.objectId);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TUserLogRecordV1TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public TUserLogRecordV1TupleScheme getScheme() {
            return new TUserLogRecordV1TupleScheme();
        }
    }

    private static class TUserLogRecordV1TupleScheme extends org.apache.thrift.scheme.TupleScheme<TUserLogRecordV1> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TUserLogRecordV1 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            oprot.writeI32(struct.oper);
            oprot.writeString(struct.comment);
            oprot.writeBool(struct.success);
            oprot.writeI64(struct.prsId);
            struct.dateIn.write(oprot);
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetRemoteAddr()) {
                optionals.set(0);
            }
            if (struct.isSetAllAddr()) {
                optionals.set(1);
            }
            if (struct.isSetUa()) {
                optionals.set(2);
            }
            if (struct.isSetSid()) {
                optionals.set(3);
            }
            if (struct.isSetObjectType()) {
                optionals.set(4);
            }
            if (struct.isSetObjectId()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetRemoteAddr()) {
                oprot.writeString(struct.remoteAddr);
            }
            if (struct.isSetAllAddr()) {
                oprot.writeString(struct.allAddr);
            }
            if (struct.isSetUa()) {
                oprot.writeString(struct.ua);
            }
            if (struct.isSetSid()) {
                oprot.writeString(struct.sid);
            }
            if (struct.isSetObjectType()) {
                oprot.writeString(struct.objectType);
            }
            if (struct.isSetObjectId()) {
                oprot.writeString(struct.objectId);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TUserLogRecordV1 struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            struct.oper = iprot.readI32();
            struct.setOperIsSet(true);
            struct.comment = iprot.readString();
            struct.setCommentIsSet(true);
            struct.success = iprot.readBool();
            struct.setSuccessIsSet(true);
            struct.prsId = iprot.readI64();
            struct.setPrsIdIsSet(true);
            struct.dateIn = new TInstant();
            struct.dateIn.read(iprot);
            struct.setDateInIsSet(true);
            java.util.BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                struct.remoteAddr = iprot.readString();
                struct.setRemoteAddrIsSet(true);
            }
            if (incoming.get(1)) {
                struct.allAddr = iprot.readString();
                struct.setAllAddrIsSet(true);
            }
            if (incoming.get(2)) {
                struct.ua = iprot.readString();
                struct.setUaIsSet(true);
            }
            if (incoming.get(3)) {
                struct.sid = iprot.readString();
                struct.setSidIsSet(true);
            }
            if (incoming.get(4)) {
                struct.objectType = iprot.readString();
                struct.setObjectTypeIsSet(true);
            }
            if (incoming.get(5)) {
                struct.objectId = iprot.readString();
                struct.setObjectIdIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

